package com.restfull.api.entities;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import com.restfull.api.dtos.book.BookDTO;
import com.restfull.api.enums.Rate;
import com.restfull.api.enums.Status;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Table(name = "books")
@Data
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "gen_books_id")
    @SequenceGenerator(name = "gen_books_id", sequenceName = "seq_books_id", allocationSize = 1)
    private Long id;

    @Column(nullable = false, length = 250)
    private String title;

    // @Column(nullable = false, length = 250)
    // private String author;

    @Column(nullable = true)
    private String description;

    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
    @JoinTable(
     name = "books_image",
     joinColumns = @JoinColumn(name = "book_id"),
     inverseJoinColumns = @JoinColumn(name = "image_id")
     )
    private List<Image> images;

    // @Column(nullable = false, columnDefinition = "integer default 0")
    // private int likes;

    @Column(nullable = false, columnDefinition = "double default 0")
    private double price;

    private Date createdAt;

    private Date lastUpdateAt;

    @ElementCollection(targetClass = Rate.class)
    @CollectionTable(name = "book_rating", joinColumns = @JoinColumn(name = "book_id"))
    @Enumerated(EnumType.STRING)
    private List<Rate> ratings;

    private String url;

    @Enumerated(EnumType.STRING)
    private Status status;

    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(
     name = "book_user_follow",
     joinColumns = @JoinColumn(name = "book_id"),
     inverseJoinColumns = @JoinColumn(name = "user_id")
     )
    private List<User> followers;

//    @ManyToMany(cascade = CascadeType.ALL)
//    @JoinTable(
//     name = "book_type",
//     joinColumns = @JoinColumn(name = "book_id"),
//     inverseJoinColumns = @JoinColumn(name = "type_id")
//     )
//    private List<Type> types;

    public Book() {
        super();
    }

    public Book(String title, String description, List<Image> images, double price, Date createdAt,
            Date lastUpdateAt, List<Rate> ratings, String url, Status status, List<User> followers,
                List<Type> types
    ) {
        this.title = title;
        this.description = description;
        this.images = images;
        this.price = price;
        this.createdAt = createdAt;
        this.lastUpdateAt = lastUpdateAt;
        this.ratings = ratings;
        this.url = url;
        this.status = status;
        this.followers = followers;
        this.types = types;
    }

    public Book(BookDTO book) {
        this.id = book.getId();
        this.title = book.getTitle();
        this.description = book.getDescription();
        this.images = book.getImages().stream().map(Image::new).collect(Collectors.toList());
        this.price = book.getPrice();
        this.createdAt = book.getCreatedAt();
        this.lastUpdateAt = book.getLastUpdateAt();
        this.types = book.getTypes().stream().map(Type::new).collect(Collectors.toList());
    }

    // ----------------Image----------------
    public List<String> getImagesString() {
        return images.stream().map(Image::getPath).collect(Collectors.toList());
    }

    public void setImages(List<Image> images) {
        if (images == null || images.isEmpty())
            this.images.clear();
        else
            this.images = images;
    }

    public void addImage(Image image) {
        this.images.add(image);
    }

    public void removeImage(Image image) {
        this.images.remove(image);
    }

    // ----------------Rate----------------
    public double getAverageRating() {
        return ratings.stream().mapToInt(Rate::getValue).average().orElse(0);
    }

    public void setRatings(List<Rate> ratings) {
        if (ratings == null || ratings.isEmpty())
            this.ratings.clear();
        else
            this.ratings = ratings;
    }

    public void addRating(Rate rate) {
        this.ratings.add(rate);
    }

    public void removeRating(Rate rate) {
        this.ratings.remove(rate);
    }

    // ----------------Follow----------------
    public List<String> getFollowersString() {
        return followers.stream().map(User::getEmail).collect(Collectors.toList());
    }

    public void setFollowers(List<User> followers) {
        if (followers == null || followers.isEmpty())
            this.followers.clear();
        else
            this.followers = followers;
    }

    public void addFollower(User followerUser) {
        this.followers.add(followerUser);
    }

    public void removeFollower(User followerUser) {
        this.followers.remove(followerUser);
    }

    // ----------------Type----------------
    public List<String> getTypesString() {
        return types.stream().map(Type::getName).collect(Collectors.toList());
    }

    public void setTypes(List<Type> types) {
        if (types == null || types.isEmpty())
            this.types.clear();
        else
            this.types = types;
    }

    public void addType(Type type) {
        this.types.add(type);
    }

    public void removeType(Type type) {
        this.types.remove(type);
    }

}
